from utils.logger import *
from API.Vulnerability_Api.Asset_Weakness_Api.weakness import *
from API.Asset_detection_Api.Asset_Management_Api.management import *
from common.vulnerability_public import *
from common.asset_public import *


@allure.feature("资产弱点")
class Test_weakness:

    @pytest.mark.slow("这是条测试时间较长的用例")
    @pytest.mark.parametrize('ID', ['001'])
    @allure.story("新建资产弱点")
    @allure.severity(allure.severity_level.CRITICAL)  # 优先级
    def test_add_weakness(self, ID, request, cookies, random_string, random_ip, random_mac):
        self.logger = get_log(request.node.name)
        with allure.step("执行步骤: 1"):
            name = random_string
            addr = random_ip + '/' + random_mac
            ip = random_ip
            mac = random_mac
            Name = ('data7', 'name')
            manageAddr = ('data7', 'manageAddr')
            IP = ('data7', 'assetInterfaces', 0, 'ip')
            MAC = ('data7', 'assetInterfaces', 0, 'mac')
            replacement_dict = {
                Name: name,
                manageAddr: addr,
                IP: ip,
                MAC: mac
            }
            data = a.replace_value_in_yml(asset_management_file, replacement_dict)['data7']
            rsp1 = management().asset_add(data, cookies)
            result = rsp1.json()['result']
        with allure.step("执行步骤 2"):
            data = a.read_yml_file(weakness_file)['data5']
            rsp2 = weakness().CveList(data, cookies)
            Id = rsp2.json()['result']['cveVos'][0]['cveId']
        with allure.step("执行步骤: 3"):
            ids = result
            ips = ip
            cveId = Id
            assetIps = ('data7', 'assetIps')
            assetIds = ('data7', 'assetIds')
            cveID = ('data7', 'cveID')
            replacement_dict = {
                assetIps: [ips],
                assetIds: [ids],
                cveID: cveId
            }
            data = a.replace_value_in_yml(weakness_file, replacement_dict)['data7']
            rsp3 = weakness().VulnReport(data, cookies)
            msg3 = rsp3.json()['message']
        with allure.step("执行步骤: 4"):
            Ids = ('data8', 'ids')
            replacement_dict = {
                Ids: [result]
            }
            data = a.replace_value_in_yml(asset_management_file, replacement_dict)['data8']
            rsp4 = management().asset_delete(data, cookies)
            msg4 = rsp4.json()['message']
        self.logger.info(
            '开始执行第{}条用例\n新增资产id为{}\n新建弱点id为{}\n新建弱点返回信息为{}'.format(ID, result, cveId, msg3))
        assert msg3 == "新增弱点成功!" and msg4 == '操作成功'
