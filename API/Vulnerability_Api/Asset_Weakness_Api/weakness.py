import inspect
from API.Api_action import *


class weakness:

    def __init__(self):
        self.method = Api_method()

    def base_attr_value(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/api/asset/' + url_route
        rsp = self.method.http_post_json(url, None, None, None, cookie)
        return rsp

    def select_tree_list(self, data, cookie):  # 1
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/api/' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    @allure.step("弱点来源")
    def ReportEnums(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/vulnReport/select-' + url_route
        rsp = self.method.http_get(url, None, None, cookie)
        return rsp

    @allure.step("获取弱点运维")
    def TaskReportList(self, data, cookie):  # 2
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReport/select-' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    @allure.step("获取漏洞图标数据")
    def TaskReportChart(self, data, cookie):  # 3
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReport/select-' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    def asset_(self, data, cookie):  # 4
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/api/' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    @allure.step("获取所有漏洞信息")
    def CveList(self, data, cookie):  # 5
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnCves/select-' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    @allure.step("选择弱点")
    def SingleVulnCve_(self, id, cookie):  # 1
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReport/select-' + url_route + id
        rsp = self.method.http_post_json(url, None, None, None, cookie)
        return rsp

    def time(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/api/' + url_route
        rsp = self.method.http_get(url, None, None, cookie)
        return rsp

    @allure.step("添加关联资产")
    def assetTag_all(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/' + url_route
        rsp = self.method.http_get(url, None, None, cookie)
        return rsp

    def attrfield_manager_containsUserFunction_get(self, data, cookie):  # 6
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    def virusWarning_device(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/api/' + url_route
        rsp = self.method.http_get(url, None, None, cookie)
        return rsp

    @allure.step("获取资产类型列表")
    def asset_type_getAssetTypeAll(self, cookie):
        url_route = inspect.currentframe().f_code.co_name
        url = Public().handle_str() + '/tsa/api/' + url_route
        rsp = self.method.http_get(url, None, None, cookie)
        return rsp

    @allure.step("新建弱点")
    def VulnReport(self, data, cookie):  # 7
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReport/add-' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

    def SingleTaskReport(self, id, cookie):  # 2
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReport/select-' + url_route + id
        rsp = self.method.http_post_json(url, None, None, None, cookie)
        return rsp

    def TaskReport(self, data, cookie):  # 8
        url_route = inspect.currentframe().f_code.co_name.replace('_', '/')
        url = Public().handle_str() + '/tsa/vulnReportDispose/dispose-' + url_route
        rsp = self.method.http_post_json(url, data, None, None, cookie)
        return rsp

